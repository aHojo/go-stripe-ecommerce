{{ template "base" .}}

{{define "title"}}
Virtual Terminal
{{end}}

{{define "content"}}
  <h2>Virtual Terminal</h2>

  <div class="alert alert-danger text-center d-none" id="card-messages"></div>

  <form action="/payment-succeeded" method="post" name="charge_form" id="charge_form" class="d-block needs-validation charge-form" autocomplete="off" novalidate="">
    <div class="mb-3">
      <label for="amount" class="form-label">Amount</label>
      <input type="text" class="form-control" id="amount" name="amount" placeholder="Amount" required="" autocomplete="amount-new">
    </div>
    <div class="mb-3">
      <label for="cardholder-name" class="form-label">Cardholder Name</label>
      <input type="text" class="form-control" id="cardholder-name" name="cardholder-name" placeholder="Name" required="" autocomplete="amount-new">
    </div>
    <div class="mb-3">
      <label for="email" class="form-label">Cardholder Email</label>
      <input type="email" class="form-control" id="cardholder-email" name="cardholder-email" placeholder="Email" required="" autocomplete="email-new">
    </div>
    <!-- card number will be built by strip --> 
    <div class="mb-3">
      <label for="card-element" class="form-label">Credit Card</label>
      <div id="card-element" class="form-control"></div>
      <div class="alert-danger text-center" id="card-errors" role="alert"></div>
      <div class="alert-success text-center" id="card-success" role="alert"></div>
    </div>
    <hr/>
    <a id="pay-button" class="btn btn-primary btn-lg btn-block" href="javascript:void(0)" onClick="val()">Pay</a>

    <div id="processing-payment" class="text-center d-none">
      <div class="spinner-border text-primary" role="status">
        <span class="visually-hidden">Loading...</span>
      </div>
    </div>

    <input type ="hidden" name="payment_intent" id="payment_intent" />
    <input type ="hidden" name="payment_method" id="payment_method" />
    <input type ="hidden" name="payment_amount" id="payment_amount" />
    <input type ="hidden" name="payment_currency" id="payment_currency" />
  </form>
{{end}}


{{define "js"}}
  <script src="https://js.stripe.com/v3/"></script>
  <script>
    let card;
    let stripe;
    const cardMessages = document.getElementById("card-messages");
    const payButton = document.getElementById("pay-button");
    const processing = document.getElementById("processing-payment");


    stripe = Stripe('pk_test_51JYGx3ByDta618GrFT7ASeteYaoTvRjkq3E5VqDimRxo5hprFhacY7EBxWooft2sKlO8AUa2MKgELbWmb7uhllfi00NoFUiz3O');

    function hidePayButton() {
      payButton.classList.add("d-none");
      processing.classList.remove("d-none");
    }

    async function val() {
      let form = document.getElementById("charge_form");
      if (form.checkValidity() === false) {
        this.event.preventDefault();
        this.event.stopPropagation();
        form.classList.add('was-validated');
        return
      }

      form.classList.add('was-validated');
      hidePayButton();

      let amountToCharge = String(parseFloat(document.getElementById("amount").value) * 100); // need a whole number

      let payload = {
        amount: amountToCharge,
        currency: 'usd',
      }

      const requestOptions = {
        method: 'POST',
        headers: {
        'Accept': 'application/json',
        'Content-Type': 'application/json'
        },
        body: JSON.stringify(payload),
      }
      
      const response = await fetch("http://localhost:4001/api/payment-intent", requestOptions);
      const data = await response.text();
      try {
        const paymentIntent = JSON.parse(data);
        console.log(paymentIntent);
      } catch (e) {
        console.log(e);
      }
    }

    (function(){
      // create stripe and elements
      const elements = stripe.elements();

      const style = {
        base: {
          fontSize: '16px',
          lineHeight: '24px',
        }
      }

      // card entry
      card = elements.create('card', {
        style,
        hidePostalCode: true,
        })
        card.mount("#card-element");

        // check for input errors
        card.addEventListener('change', (event) => {
          const errrorDiv = document.getElementById('card-errors');
          if (event.error) {
            errrorDiv.classList.remove('d-none');
            errrorDiv.textContent = event.error.message;
          } else {
            errrorDiv.classList.add('d-none');
            errrorDiv.textContent = '';
          }
        })
    })();
  </script>
{{end}}